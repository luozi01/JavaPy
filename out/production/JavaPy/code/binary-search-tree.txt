class BSTree{
    class Node {
        key
        left
        right
        parent

        func init(keyInt) {
            key = keyInt
            left = null
            right = null
            parent = null
        }
    }

    root := null

    func init() {
      root = null
    }

    func addNode(item){
      curr := root
      parent := null
      newNode := new Node(item)

      if root == null {
          root = newNode
      }else{
        while curr != null {
          parent = curr
          if item < curr.key {
              curr = curr.left
          }else{
              curr = curr.right
          }
        }

        if item < parent.key {
          parent.left = newNode
        } else {
          parent.right = newNode
        }
          newNode.parent = parent
      }
    }

    func containsNode(target){
        curr := root
        while curr != null {
            if target == curr.key{
                return 1
            }
            if target < curr.key{
                curr = curr.left
            } else{
                curr = curr.right
            }
        }
        return 0
    }

    func findMaxNode(curr){
        if curr.right == null{
            return curr
        }else{
          return findMaxNode(curr.right)
        }
    }

    func removeHasSingle(node){
        if node == root {
            if node.left == null and node.right == null{
                root = null
            } elif node.left != null {
                root = node.left
                node.left = null
                root.parent = null
            } elif node.right != null {
                root = node.right
                node.right = null
                root.parent = null
            }
        }
        elif node.left != null {
            if node == node.parent.left {
                node.parent.left = node.left
            } else{
                node.parent.right = node.left
            }
            node.left.parent = node.parent
            node.left = null
        }
        elif node.right != null {
            if node == node.parent.right {
                node.parent.right = node.right
            } else{
                node.parent.left = node.right
            }
            node.right.parent = node.parent
            node.right = null
        }else{
            if node.parent.left == node {
                node.parent.left = null
            }else{
                node.parent.right = null
            }
        }
        node.parent = null
    }

    func findNode(Node curr, int item){
        if curr == null {
            return null
        }
        if curr.key == item{
            return curr
        } elif curr.key > item {
            return findNode(curr.left, item)
        } else {
            return findNode(curr.right, item)
        }
    }

    func removeHasBoth(node){
        var max = findMaxNode(node.left)
        node.key = max.key
        removeHasSingle(max)
    }

    func remove(item){
        var node = findNode(root, item)
        if node != null {
            if node.left != null and node.right != null{
                removeHasBoth(node)
            }
            else{
                removeHasSingle(node)
            }
            return 1
        }else{
          return 0
        }
    }
}

var bst = new BSTree()
var notFinish = true
while notFinish{
  var op = read()
  if op == -1{
    notFinish = false
  }elif op == 1{
    var a = bst.addNode(read(), tree)
  }elif op == 2{
    print bst.containsNode(read(), tree)
  }else{
    print bst.remove(read(), tree)
  }
}
