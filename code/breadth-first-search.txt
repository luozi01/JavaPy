func bfs(int[] input, int src, int dst){
    table := [:]
    for index in range(1, input.length - 1, 2){
      table.put(input[index],input[index + 1])
      table.put(input[index + 1], input[index])
    }
    queue := int[src]
    visited := int[src]
    isFinish := false
    while !queue.isEmpty() and !isFinish{
        visitedVertex := queue.removeFirst()
        if visitedVertex == dst{
            vertex := dst
            route := int[dst]
            while vertex != src {
                edges := table.get(vertex)
                for edge in edges{
                    if visited.contains(edge) and (visited.indexof(edge) < visited.indexof(vertex)){
                        route.insert(0, edge)
                        vertex = edge
                    }
                }
            }
            for i in route{
                print i
            }
            isFinish = true
        }
        for next in table.get(visitedVertex){
            if(!visited.contains(next)){
                queue.add(next)
                visited.add(next)
            }
        }
    }
    return -1
}
list := int[]
isDone := false
while(!isDone){
  num := read()
  if(num == -1){
    isDone = true
  }else{
    list.add(num)
  }
}
output := bfs(list, read(),read())
