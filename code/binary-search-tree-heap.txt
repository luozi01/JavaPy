func getIndex(int node, int[] tree) {
    return tree.indexof(node)
}

func insertNode(int data, int[] tree) {
    if tree[1] == -1 {
        tree[1] = data
    } else {
      curr := 1
      notDone := true
      while tree[curr] != -1 and notDone {
        if data <= tree[curr] {
          if tree[getLeft(curr)] == -1 {
            a := setLeft(curr, tree, data)
            notDone = false
          } else {
            curr = getLeft(curr)
          }
        } else {
          if tree[getRight(curr)] == -1 {
            a := setRight(curr, tree, data)
            notDone = false
          } else {
            curr = getRight(curr)
          }
        }
      }
    }
    return -1
}

func remove(int item, int[] tree) {
    if containsNode(item, tree) == 1 {
        pos := getIndex(item, tree)
        if tree[getLeft(pos)] != -1 and tree[getRight(pos)] != -1 {
            a := removeHasBoth(pos, tree)
        } else {
            a := removeMissing(pos, tree)
        }
        return 1
    }else{
      return 0
    }
}

func removeMissing(int pos, int[] tree) {
    if tree[getLeft(pos)] == -1 and tree[getRight(pos)] != -1 {
      if tree[pos] == tree[1] {
          tree[1] = tree[getRight(pos)]
      } elif tree[pos] == tree[getLeft(getParent(pos))] {
          a := setLeft(getParent(pos), tree, tree[getRight(pos)])
      } else {
          a := setRight(getParent(pos), tree, tree[getRight(pos)])
      }
      tree[getRight(pos)] = -1
    } elif tree[getLeft(pos)] != -1 and tree[getRight(pos)] == -1 {
      if tree[pos] == tree[1] {
          tree[1] = tree[getLeft(pos)]
      } elif tree[pos] == tree[getLeft(getParent(pos))] {
          a := setLeft(getParent(pos), tree, tree[getLeft(pos)])
      } else {
          a := setRight(getParent(pos), tree, tree[getLeft(pos)])
      }
      tree[getLeft(pos)] = -1
    } else {
      if tree[pos] == tree[1] {
          tree[1] = -1
      } elif tree[pos] == tree[getLeft(getParent(pos))] {
          a := setLeft(getParent(pos), tree, -1)
      } else {
          a := setRight(getParent(pos), tree, -1)
      }
    }
}

func removeHasBoth(int pos, int[] tree) {
    removeIndex := findMax(getLeft(pos), tree)
    tree[pos] = tree[removeIndex]
    a := removeMissing(removeIndex, tree)
}

func findMax(int index, int[] tree) {
    if tree[getRight(index)] == -1 {
      return index
    }else{
      return findMax(getRight(index), tree)
    }
}

func containsNode(int curr, int[] tree) {
    if getIndex(curr, tree) != -1{
      return 1
    }else{
      return 0
    }
}

func setLeft(int index, int[] tree, int data) {
    tree[2 * index] = data
}

func setRight(int index, int[] tree, int data) {
    tree[2 * index + 1] = data
}

func getLeft(int index) {
    return 2 * index
}

func getRight(int index) {
    return 2 * index + 1
}

func getParent(int index) {
    if index % 2 == 0{
      return index / 2
    }else{
      return (index - 1) / 2
    }
}

func toString(int[] tree){
  string := int[]
  if tree[1] == -1 {
    print -11111111
  }
  q := int[1]

  while !q.isEmpty() {
    current := q.removeFirst()
    string.add(tree[current])
    if tree[getLeft(current)] != -1 {
      q.add(getLeft(current))
    }
    if tree[getRight(current)] != -1 {
      q.add(getRight(current))
    }
  }
  return string
}

tree := int[]
for i in range(2 ** 20){
  tree.add(-1)
}
notFinish := true
while notFinish{
  op := read()
  if op == -1{
    notFinish = false
  }elif op == 1{
    a := insertNode(read(), tree)
  }elif op == 2{
    print containsNode(read(), tree)
  }else{
    print remove(read(), tree)
  }
}
